# -*- coding: utf-8 -*-
"""Copy of Pipeline.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1zHmMfBuH7LY21AIrW-9k_iguvnbUSSd2
"""

id=[205366000,205366000,205366000,205366000,205366000]
time=['12-09-2018 21:03','12-09-2018 21:09','12-09-2018 21:21','12-09-2018 21:27','12-09-2018 22:27']
vtype=[1,1,1,1,1]
lon=[10.79,10.81,10.85,10.87,11.08]
lat=[55.61,55.58,55.53,55.50,55.24]
maxspeed=[16,16,16,16,16]
dwt=[5,4,4,4,5]
distport=[110,100,105,115,109]

import datetime
def tlap(n):
  a= time[n-1]
  b=time[n]
  t1=a.split()
  t2=b.split()

  td1=t1[0].split('-')
  td2=t2[0].split('-')
  tt1=t1[1].split(':')
  tt2=t2[1].split(':')

  a1=[]
  a2=[]

  ti1= datetime.datetime(int(td1[2]),int(td1[1]),int(td1[0]),int(tt1[0]),int(tt1[1]),0)
  ti2= datetime.datetime(int(td2[2]),int(td2[1]),int(td2[0]),int(tt2[0]),int(tt2[1]),0)

  c = ti2-ti1
  
  minutes = c.total_seconds() / 60

  return minutes

n=5

new_data = []
count=0
rate=0
for i in range(1,5):
  #if(id[i]==id[i-1]):
    count=count+1
    t=tlap(i)
    #tdiffout[i-1]=t/60
    x=abs(lon[i]-lon[i-1])
    #lndiff.append(x)
    y=abs(lat[i]-lat[i-1])
    #ltdiff.append()
    #z=(speed[i-1]+speed[i])/2
    rate=1
    date=time[i].split()[0]
    tim= int (time[i].split()[1].split(':')[0])
    #print(t)
    if (dwt[i]==dwt[i-1]):
      dwtdif=0
    else:
      dwtdif=1

    if (t!=0):

      #dic={}
      #dic[id[i]]=rate

      new_list = []
      new_list.append(id[i])
      #new_list.append(date)
      #new_list.append(tim)
      new_list.append(t)
      new_list.append(vtype[i])
      new_list.append(x)
      new_list.append(y)
      #new_list.append(z)
      new_list.append(rate)
      new_list.append(1)
      #new_list.append(lon[i-1])
      #new_list.append(lon[i])
      #new_list.append(lat[i-1])
      #new_list.append(lat[i])
      new_list.append((maxspeed[i]*18)/5)
      new_list.append(dwtdif)
      new_list.append(distport[i-1])
      new_list.append(distport[i])

      new_data.append(new_list)
  #else:
   # count=0

testdata = pd.DataFrame(new_data,columns=['ID','timediff','type','lon','lat','rate','SD','spmax','dwtdiff','d1','d2'])

td=testdata['timediff']
lndiff=testdata['lon']
ltdiff=testdata['lat']
spmax=testdata['spmax']
dwtdiff=testdata['dwtdiff']
d1=testdata['d1']
d2=testdata['d2']

#dwtdiff

for i in range(0,len(new_data)):
  a=[]
  for j in range(0,4):
    a.append(new_data[j][1])

  b=max(a)
  a.remove(b)
  total=sum(a)
  mean = total / len(a) 
  variance = sum([((x - mean) ** 2) for x in a]) / len(a) 
  res = variance ** 0.5
  new_data[i][5]=mean
  new_data[i][6]=res

inactivity=[]
for i in range (0,4):
  if (new_data[i][1]<60):
    inactivity.append(0)

  else:  
    if (new_data[i][1]>new_data[i][5]+new_data[i][6]):
      if (new_data[i][1]>1440):
        inactivity.append(2)
      else:
        inactivity.append(1)

    else:
      inactivity.append(0)

import numpy as np
import pandas as pd

import tensorflow as tf

from tensorflow import feature_column
from tensorflow.keras import layers
from sklearn.model_selection import train_test_split
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense

from keras.models import load_model
new_model = load_model('DL_model.h5')
print(new_model.summary())

tout=[time[1],time[2],time[3],time[4]]
#tdiffout=[0,0,0,0]
dp=[]
sus=[]
typsus=[]
conf=[]
for i in range (0,4):
  if (inactivity[i]==0):
    dp.append(0)
    sus.append(0)
    typsus.append(0)
    conf.append(101)
    

  if (inactivity[i]==2):
    dp.append(1)
    sus.append(1)
    typsus.append(1)
    conf.append(101)
    #print('1')

  if (inactivity[i]==1):
    #print('here')
    dp.append(1)
    a=[td[i]/60,lndiff[i],ltdiff[i],spmax[i],dwtdiff[i],d1[i],d2[i]]
    new_output=new_model.predict([a])
    label=np.argmax(new_output,axis=1)
    su=label[0]

    #print(su)

    if (su==0):
      if (dwtdiff[i]==0):
        susi=0
        typsusi=0
        confi=101
      else:
        su=1
    if (su==1):
      susi=1
      typsusi=1
      if (dwtdiff[i]>0):
        confi=0.9
      else:
        confi=101
      


    if (su==2):
      susi=1
      typsusi=2
      confi=1-path/dis
    

    sus.append(susi)
    typsus.append(typsusi) 
    conf.append(confi)
  #print(conf)
  #print(conf)

print ('timestamp,timediff, dark, sus, type of sus,conf')
for i in range (0,4):
  print(tout[i],td[i],dp[i],sus[i],typsus[i],conf[i])

